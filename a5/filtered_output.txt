jlockw01* 1* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 
acrook01* 4* 1) POST '/submit.json' with valid params displays the highscores on the homepage* page.should have_content "Grader comp 1"* 2) POST '/submit.json' with valid params is not dependent on order of json* page.should have_content "Grader comp 3"* 3) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 4) GET '/highscores.json' does not return bad items* JSON.parse(response).length.should == 0* 
rschla02* 4* 1) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 
taland01* 14* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
cclair01* 7* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' has a input box* page.should have_css("#input")* 6) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 7) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 
cblanc03* 2* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 
ali04* 4* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 
dricha09* 0* 
msmile01* 14* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
kgerri01* 5* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 
cjacks04* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
edougl01* 14* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
cvrett01* 5* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/highscores.json' does not return bad items* JSON.parse(response).length.should == 0* 
igray01* 4* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 
paudch01* 14* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
spurce02* 8* 1) POST '/submit.json' with valid params displays the highscores on the homepage* page.should have_content "Grading game 1"* 2) POST '/submit.json' with valid params is not dependent on order of json* page.should have_content "Grading game 3"* 3) GET '/usersearch' has a input box* page.should have_css("#input")* 4) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 5) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 6) GET '/highscores.json' only returns 10 items* JSON.parse(response).length.should == 10* 7) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 8) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
bfisch02* 7* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/highscores.json' only returns 10 items* JSON.parse(response).length.should == 10* 6) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 7) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
hmao01* 0* 
eeng01* 15* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#submit")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
kcohen07* 15* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#submit")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
sbrown09* 6* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' has a input box* page.should have_css("#submit")* 6) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
tfolli01* 17* 1) GET '/' responds with a success* visit "/"* 2) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/usersearch' has a input box* visit "/usersearch"* 12) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/usersearch' searching for bad 'username' does not display any results* visit "/usersearch"* 14) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 17) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
bleike01* 10* 1) POST '/submit.json' with valid params response with a success* response.code.should == 200* 2) POST '/submit.json' with invalid params responds with a success* response.code.should == 200* 3) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 4) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params does not store bad params* page.should_not have_content "Nasty message"* 6) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 8) GET '/usersearch' searching for 'username' displays the users scores* page.should have_content "Grading game 9"* 9) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 10) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
uberge01* 7* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' searching for 'username' displays the users scores* page.should have_content "11111109"* 6) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 7) GET '/highscores.json' does not return bad items* JSON.parse(response).length.should == 0* 
ademps02* 14* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
sharri05* 10* 1) POST '/submit.json' with valid params displays the highscores on the homepage* page.should have_content "Grader comp 1"* 2) POST '/submit.json' with valid params response with a success* response.code.should == 200* 3) POST '/submit.json' with valid params is not dependent on order of json* page.should have_content "Grader comp 3"* 4) POST '/submit.json' with invalid params responds with a success* response.code.should == 200* 5) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "11111106"* 7) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 8) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 9) GET '/usersearch' searching for 'username' displays the users scores* page.should have_content "Grading game 9"* 10) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 
jschne03* 10* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 4) GET '/usersearch' has a input box* page.should have_css("#input")* 5) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 6) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 7) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 8) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 9) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
lrassa01* 9* 1) POST '/submit.json' with valid params displays the highscores on the homepage* page.should have_content "Grading game 1"* 2) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 6) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 7) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 8) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 9) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
cmarck01* 14* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
smeldr01* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
bwood03* 7* 1) POST '/submit.json' with valid params response with a success* response.code.should == 200* 2) POST '/submit.json' with invalid params responds with a success* response.code.should == 200* 3) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 4) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 5) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 6) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 7) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 
ntarrh01* 4* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 
dlyle01* 8* 1) POST '/submit.json' with valid params displays the highscores on the homepage* page.should have_content "Grader comp 1"* 2) POST '/submit.json' with valid params response with a success* response.code.should == 200* 3) POST '/submit.json' with valid params is not dependent on order of json* page.should have_content "Grader comp 3"* 4) POST '/submit.json' with invalid params responds with a success* response.code.should == 200* 5) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "11111106"* 7) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 8) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 
hmanso02* 14* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
iredel01* 14* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
ajenki01* 5* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with invalid params does not store bad params* page.should_not have_content "Nasty message"* 4) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 
awassa01* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
gjosep02* 7* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 5) GET '/usersearch' has a input box* page.should have_css("#input")* 6) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 7) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 
gbambu01* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
jraham01* 4* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 
jserri01* 8* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 6) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 7) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 8) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
nkapur01* 7* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' has a input box* page.should have_css("#input")* 6) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 7) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 
dgriff03* 9* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 5) GET '/usersearch' has a input box* page.should have_css("#input")* 6) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 7) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 8) GET '/highscores.json' only returns 10 items* JSON.parse(response).length.should == 10* 9) GET '/highscores.json' displays them in order* JSON.parse(response)[9]['score'].to_i.should == 5* 
gnicho01* 17* 1) GET '/' responds with a success* visit "/"* 2) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/usersearch' has a input box* visit "/usersearch"* 12) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/usersearch' searching for bad 'username' does not display any results* visit "/usersearch"* 14) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 17) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
ndavis01* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
emaria02* 6* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) GET '/usersearch' has a input box* page.should have_css("#input")* 3) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 4) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 5) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 6) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
jcanue01* 14* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
mbliss04* 15* 1) GET '/' responds with a success* visit "/"* 2) POST '/submit.json' with valid params displays the highscores on the homepage* visit "/"* 3) POST '/submit.json' with valid params is not dependent on order of json* visit "/"* 4) POST '/submit.json' with invalid params only allows integers for scores* visit "/"* 5) POST '/submit.json' with invalid params does not display if 'game_title' is missing* visit "/"* 6) POST '/submit.json' with invalid params does not store bad params* visit "/"* 7) POST '/submit.json' with invalid params does not display if 'username' is missing* visit "/"* 8) POST '/submit.json' with invalid params does not display if 'score' is missing* visit "/"* 9) GET '/usersearch' has a input box* visit "/usersearch"* 10) GET '/usersearch' searching for 'username' displays the users scores* visit "/usersearch"* 11) GET '/usersearch' searching for bad 'username' does not display any results* visit "/usersearch"* 12) GET '/highscores.json' only returns 10 items* RestClient.get([url_from(uri), query].join("?"))* 13) GET '/highscores.json' displays them in order* RestClient.get([url_from(uri), query].join("?"))* 14) GET '/highscores.json' has a 'created_at' field* RestClient.get([url_from(uri), query].join("?"))* 15) GET '/highscores.json' does not return bad items* RestClient.get([url_from(uri), query].join("?"))* 
csaund01* 11* 1) POST '/submit.json' with valid params displays the highscores on the homepage* page.should have_content "Grading game 1"* 2) POST '/submit.json' with valid params is not dependent on order of json* page.should have_content "Grading game 3"* 3) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 5) GET '/usersearch' has a input box* page.should have_css("#input")* 6) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 7) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 8) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 9) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
atai02* 6* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 6) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 
jwrigh07* 9* 1) POST '/submit.json' with valid params displays the highscores on the homepage* page.should have_content "Grading game 1"* 2) POST '/submit.json' with valid params is not dependent on order of json* page.should have_content "Grading game 3"* 3) GET '/usersearch' has a input box* page.should have_css("#input")* 4) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 5) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 6) GET '/highscores.json' only returns 10 items* RestClient.get([url_from(uri), query].join("?"))* 7) GET '/highscores.json' displays them in order* RestClient.get([url_from(uri), query].join("?"))* 8) GET '/highscores.json' has a 'created_at' field* RestClient.get([url_from(uri), query].join("?"))* 9) GET '/highscores.json' does not return bad items* RestClient.get([url_from(uri), query].join("?"))* 
jmao01* 0* 
dchen01* 1* 1) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 
skreva01* 11* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' has a input box* page.should have_css("#input")* 6) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 7) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 8) GET '/highscores.json' only returns 10 items* JSON.parse(response).length.should == 10* 9) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 10) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 11) GET '/highscores.json' does not return bad items* JSON.parse(response).length.should == 0* 
amende02* 6* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 6) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 
jfishb01* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
rxiao01* 6* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) GET '/usersearch' has a input box* page.should have_css("#input")* 3) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 4) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 5) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 6) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
bnicho01* 6* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 5) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 6) GET '/highscores.json' does not return bad items* JSON.parse(response).length.should == 0* 
bcefal01* 7* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' has a input box* page.should have_css("#input")* 6) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 7) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 
ashinn01* 8* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' has a input box* page.should have_css("#input")* 6) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 7) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 8) GET '/highscores.json' does not return bad items* JSON.parse(response).length.should == 0* 
ksegaw01* 17* 1) GET '/' responds with a success* visit "/"* 2) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/usersearch' has a input box* visit "/usersearch"* 12) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/usersearch' searching for bad 'username' does not display any results* visit "/usersearch"* 14) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 17) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
dkulla01* 5* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' has a input box* page.should have_css("#submit")* 
tgeher01* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
rhong01* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
hiqbal01* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
ctaylo02* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
eferbe01* 0* 
kograd01* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
kwu01* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
nsalk01* 13* 1) POST '/submit.json' with valid params displays the highscores on the homepage* page.should have_content "Grading game 1"* 2) POST '/submit.json' with valid params is not dependent on order of json* page.should have_content "Grading game 3"* 3) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grader comp 5"* 4) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 5) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "11111107"* 6) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grader comp 8"* 7) GET '/usersearch' has a input box* page.should have_css("#input")* 8) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 9) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 10) GET '/highscores.json' only returns 10 items* JSON.parse(response).length.should == 10* 11) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 12) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 13) GET '/highscores.json' does not return bad items* JSON.parse(response).length.should == 0* 
tkola01* 5* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) GET '/usersearch' has a input box* page.should have_css("#input")* 3) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 4) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 5) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 
dminni01* 8* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' has a input box* page.should have_css("#input")* 6) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 7) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 8) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
abelli02* 8* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/highscores.json' only returns 10 items* JSON.parse(response).length.should == 10* 6) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 7) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 8) GET '/highscores.json' does not return bad items* JSON.parse(response).length.should == 0* 
icross01* 4* 1) GET '/usersearch' has a input box* page.should have_css("#input")* 2) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 3) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 4) GET '/highscores.json' does not return bad items* JSON.parse(response).length.should == 0* 
sclark01* 4* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 
slenoa01* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
ldahil01* 14* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
cmalch01* 7* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/highscores.json' only returns 10 items* JSON.parse(response).length.should == 10* 6) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 7) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
rsonzb01* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
nwebst03* 8* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' has a input box* page.should have_css("#submit")* 6) GET '/usersearch' searching for 'username' displays the users scores* click_link_or_button "Submit"* 7) GET '/usersearch' searching for bad 'username' does not display any results* click_link_or_button "Submit"* 8) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
golsen01* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
bdell01* 11* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' has a input box* page.should have_css("#input")* 6) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 7) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 8) GET '/highscores.json' only returns 10 items* JSON.parse(response).length.should == 10* 9) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 10) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 11) GET '/highscores.json' does not return bad items* JSON.parse(response).length.should == 0* 
jdowne02* 8* 1) POST '/submit.json' with valid params displays the highscores on the homepage* page.should have_content "Grading game 1"* 2) POST '/submit.json' with valid params is not dependent on order of json* page.should have_content "Grading game 3"* 3) GET '/usersearch' has a input box* page.should have_css("#input")* 4) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 5) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 6) GET '/highscores.json' only returns 10 items* JSON.parse(response).length.should == 10* 7) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 8) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
ddupon02* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
jlipso01* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
jwang08* 17* 1) GET '/' responds with a success* page.should_not have_content "Heroku | Welcome to your new app!"* 2) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/usersearch' has a input box* page.should have_css("#input")* 12) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 14) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 17) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
bcadig01* 5* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 
karaga01* 8* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' has a input box* page.should have_css("#input")* 6) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 7) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 8) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 
evoege01* 12* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not store bad params* page.should_not have_content "Nasty message"* 4) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 5) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 6) GET '/usersearch' has a input box* page.should have_css("#input")* 7) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 8) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 9) GET '/highscores.json' only returns 10 items* RestClient.get([url_from(uri), query].join("?"))* 10) GET '/highscores.json' displays them in order* RestClient.get([url_from(uri), query].join("?"))* 11) GET '/highscores.json' has a 'created_at' field* RestClient.get([url_from(uri), query].join("?"))* 12) GET '/highscores.json' does not return bad items* RestClient.get([url_from(uri), query].join("?"))* 
jeaton03* 8* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 3) GET '/usersearch' has a input box* page.should have_css("#input")* 4) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 5) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 6) GET '/highscores.json' only returns 10 items* JSON.parse(response).length.should == 10* 7) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 8) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
tlubec01* 6* 1) POST '/submit.json' with valid params displays the highscores on the homepage* page.should have_content "Grading game 1"* 2) POST '/submit.json' with valid params is not dependent on order of json* page.should have_content "Grading game 3"* 3) GET '/usersearch' searching for 'username' displays the users scores* page.should have_content "Grading game 9"* 4) GET '/highscores.json' only returns 10 items* JSON.parse(response).length.should == 10* 5) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 6) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
lades01* 10* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' has a input box* page.should have_css("#input")* 6) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 7) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 8) GET '/highscores.json' only returns 10 items* JSON.parse(response).length.should == 10* 9) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 10) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
jlocke02* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
aschae03* 5* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) GET '/usersearch' has a input box* page.should have_css("#input")* 3) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 4) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 5) GET '/highscores.json' does not return bad items* JSON.parse(response).length.should == 0* 
smcdan01* 15* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 12) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
ntelek01* 17* 1) GET '/' responds with a success* page.should_not have_content "Heroku | No such app"* 2) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/usersearch' has a input box* page.should have_css("#input")* 12) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 14) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 17) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
kford* 9* 1) POST '/submit.json' with valid params displays the highscores on the homepage* page.should have_content "Grading game 1"* 2) POST '/submit.json' with valid params is not dependent on order of json* page.should have_content "Grading game 3"* 3) GET '/usersearch' has a input box* page.should have_css("#input")* 4) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 5) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 6) GET '/highscores.json' only returns 10 items* RestClient.get([url_from(uri), query].join("?"))* 7) GET '/highscores.json' displays them in order* RestClient.get([url_from(uri), query].join("?"))* 8) GET '/highscores.json' has a 'created_at' field* RestClient.get([url_from(uri), query].join("?"))* 9) GET '/highscores.json' does not return bad items* RestClient.get([url_from(uri), query].join("?"))* 
zsobin01* 11* 1) GET '/' responds with a success* visit "/"* 2) POST '/submit.json' with valid params displays the highscores on the homepage* visit "/"* 3) POST '/submit.json' with valid params is not dependent on order of json* visit "/"* 4) POST '/submit.json' with invalid params only allows integers for scores* visit "/"* 5) POST '/submit.json' with invalid params does not display if 'game_title' is missing* visit "/"* 6) POST '/submit.json' with invalid params does not store bad params* visit "/"* 7) POST '/submit.json' with invalid params does not display if 'username' is missing* visit "/"* 8) POST '/submit.json' with invalid params does not display if 'score' is missing* visit "/"* 9) GET '/usersearch' has a input box* visit "/usersearch"* 10) GET '/usersearch' searching for 'username' displays the users scores* visit "/usersearch"* 11) GET '/usersearch' searching for bad 'username' does not display any results* visit "/usersearch"* 
kgnana01* 11* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' has a input box* page.should have_css("#input")* 6) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 7) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 8) GET '/highscores.json' only returns 10 items* RestClient.get([url_from(uri), query].join("?"))* 9) GET '/highscores.json' displays them in order* RestClient.get([url_from(uri), query].join("?"))* 10) GET '/highscores.json' has a 'created_at' field* RestClient.get([url_from(uri), query].join("?"))* 11) GET '/highscores.json' does not return bad items* RestClient.get([url_from(uri), query].join("?"))* 
ediaz01* 16* 1) GET '/' responds with a success* visit "/"* 2) POST '/submit.json' with valid params displays the highscores on the homepage* visit "/"* 3) POST '/submit.json' with valid params response with a success* response.code.should == 200* 4) POST '/submit.json' with valid params is not dependent on order of json* visit "/"* 5) POST '/submit.json' with invalid params responds with a success* response.code.should == 200* 6) POST '/submit.json' with invalid params only allows integers for scores* visit "/"* 7) POST '/submit.json' with invalid params does not display if 'game_title' is missing* visit "/"* 8) POST '/submit.json' with invalid params does not store bad params* visit "/"* 9) POST '/submit.json' with invalid params does not display if 'username' is missing* visit "/"* 10) POST '/submit.json' with invalid params does not display if 'score' is missing* visit "/"* 11) GET '/usersearch' has a input box* visit "/usersearch"* 12) GET '/usersearch' searching for 'username' displays the users scores* visit "/usersearch"* 13) GET '/usersearch' searching for bad 'username' does not display any results* visit "/usersearch"* 14) GET '/highscores.json' only returns 10 items* JSON.parse(response).length.should == 10* 15) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 16) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 
gfried04* 16* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' has a input box* page.should have_css("#input")* 11) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 13) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 15) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 16) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
sdusha01* 14* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
sfried05* 14* 1) POST '/submit.json' with valid params displays the highscores on the homepage* RestClient.post(url_from(uri), data, content_type: format)* 2) POST '/submit.json' with valid params response with a success* RestClient.post(url_from(uri), data, content_type: format)* 3) POST '/submit.json' with valid params is not dependent on order of json* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params responds with a success* RestClient.post(url_from(uri), data, content_type: format)* 5) POST '/submit.json' with invalid params only allows integers for scores* RestClient.post(url_from(uri), data, content_type: format)* 6) POST '/submit.json' with invalid params does not display if 'game_title' is missing* RestClient.post(url_from(uri), data, content_type: format)* 7) POST '/submit.json' with invalid params does not store bad params* RestClient.post(url_from(uri), data, content_type: format)* 8) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 9) POST '/submit.json' with invalid params does not display if 'score' is missing* RestClient.post(url_from(uri), data, content_type: format)* 10) GET '/usersearch' searching for 'username' displays the users scores* RestClient.post(url_from(uri), data, content_type: format)* 11) GET '/highscores.json' only returns 10 items* RestClient.post(url_from(uri), data, content_type: format)* 12) GET '/highscores.json' displays them in order* RestClient.post(url_from(uri), data, content_type: format)* 13) GET '/highscores.json' has a 'created_at' field* RestClient.post(url_from(uri), data, content_type: format)* 14) GET '/highscores.json' does not return bad items* RestClient.post(url_from(uri), data, content_type: format)* 
bconro01* 12* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* RestClient.post(url_from(uri), data, content_type: format)* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 5) GET '/usersearch' has a input box* page.should have_css("#input")* 6) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 7) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 1) POST '/submit.json' with valid params displays the highscores on the homepage* page.should have_content "Grading game 1"* 2) POST '/submit.json' with valid params is not dependent on order of json* page.should have_content "Grading game 3"* 3) GET '/usersearch' has a input box* page.should have_css("#input")* 4) GET '/usersearch' searching for 'username' displays the users scores* fill_in "input", with: "Grader comp 9"* 5) GET '/usersearch' searching for bad 'username' does not display any results* fill_in "input", with: "Some random grader that is not inputed"* 6) GET '/highscores.json' only returns 10 items* JSON.parse(response).length.should == 10* 7) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 8) GET '/highscores.json' has a 'created_at' field* JSON.parse(response)[0]['created_at'].should_not be_nil* 1) GET '/' responds with a success* visit "/"* 2) POST '/submit.json' with valid params displays the highscores on the homepage* visit "/"* 3) POST '/submit.json' with valid params is not dependent on order of json* visit "/"* 4) POST '/submit.json' with invalid params only allows integers for scores* visit "/"* 5) POST '/submit.json' with invalid params does not display if 'game_title' is missing* visit "/"* 6) POST '/submit.json' with invalid params does not store bad params* visit "/"* 7) POST '/submit.json' with invalid params does not display if 'username' is missing* visit "/"* 8) POST '/submit.json' with invalid params does not display if 'score' is missing* visit "/"* 9) GET '/usersearch' has a input box* visit "/usersearch"* 10) GET '/usersearch' searching for 'username' displays the users scores* visit "/usersearch"* 11) GET '/usersearch' searching for bad 'username' does not display any results* visit "/usersearch"* 12) GET '/highscores.json' displays them in order* JSON.parse(response)[0]['score'].to_i.should == 14* 
ifried01* 4* 1) POST '/submit.json' with invalid params only allows integers for scores* page.should_not have_content "Grading game 5"* 2) POST '/submit.json' with invalid params does not display if 'game_title' is missing* page.should_not have_content "Grader comp 6"* 3) POST '/submit.json' with invalid params does not display if 'username' is missing* page.should_not have_content "Grading game 7"* 4) POST '/submit.json' with invalid params does not display if 'score' is missing* page.should_not have_content "Grading game 8"* 
